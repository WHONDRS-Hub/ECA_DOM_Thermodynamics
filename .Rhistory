str_extract(relative_abundance$sample, "EC_[^_]+-[WD]")
str_extract(relative_abundance$sample, "EC_0[0-9]{2}|EC_([A-Za-z0-9]+)+-[WD]")
str_extract(relative_abundance$sample, "EC_0[0-9]{2}|EC_([A-Za-z0-9]+)-[W|D]")
str_extract(relative_abundance$sample, "EC_0[0-9]{2}|EC_([A-Za-z0-9]+)--[WD]")
str_extract(relative_abundance$sample, "EC_[0-9]{3}-(W|D)"))
str_extract(relative_abundance$sample, "EC_[0-9]{3}-(W|D)")
str_extract(relative_abundance$sample, "EC_0[0-9]{2}|EC_([A-Za-z0-9]+)[WD]")
str_extract(relative_abundance$sample, "EC_0[0-9]{2}|EC_([A-Za-z0-9]+)+[WD]")
str_extract(relative_abundance$sample,  "EC_\\d{3}-(W|D)")
str_extract(relative_abundance$sample,    "EC_\\d{3}_[^_]*-(W|D)")
relative_abundance$Sample_Name = str_extract(relative_abundance$sample,    "EC_\\d{3}_[^_]*-(W|D)")
relative_abundance$Sample_Name = str_extract(relative_abundance$sample,    "EC_\\d{3}_[^_]*-(W|D)")
relative_abundance$Sample_Name = gsub('_SIR','',relative_abundance$Sample_Name)
relative_abundance = merge(relative_abundance,factor, by = 'Sample_Name')
relative_abundance = merge(relative_abundance,factors, by = 'Sample_Name', all = T)
View(factors)
# Create the ggplot
plots <- relative_abundance %>%
ggplot(aes(x = site, y = relative_abundance, color = Treatment)) +
geom_point(size = 3, alpha = 0.7) +
facet_wrap(~ bs1_class, scales = "free_y") +
labs(
x = "Location",
y = "Percent Relative Abundance",
color = "Treatment"
) +
theme_bw() +
theme(legend.position = "top")
# Print the plot
print(plots)
# Create the ggplot
plots <- relative_abundance %>%
ggplot(aes(x = site, y = relative_abundance, color = Treatment)) +
geom_boxplot(size = 3, alpha = 0.7) +
facet_wrap(~ bs1_class, scales = "free_y") +
labs(
x = "Location",
y = "Percent Relative Abundance",
color = "Treatment"
) +
theme_bw() +
theme(legend.position = "top")
# Print the plot
print(plots)
View(sample_data)
sample_data = read_csv(paste0(github,'EC_Data_Package/Sample_Data/EC_Sediment_Sample_Data_Summary.csv'),comment = '#', na = c('N/A', -9999)) %>%
slice(-(1:10))%>%
mutate_at(vars(-Sample_Name,-Field_Name,-IGSN,-Material), as.numeric)
View(sample_data)
sample_data = read_csv(paste0(github,'EC_Data_Package/Sample_Data/EC_Sediment_Sample_Data_Summary.csv'),comment = '#', na = c('N/A', -9999)) %>%
slice(-(1:11))%>%
mutate_at(vars(-Sample_Name,-Field_Name,-IGSN,-Material), as.numeric)
View(sample_data)
sample_data = read_csv(paste0(github,'EC_Data_Package/Sample_Data/EC_Sediment_Sample_Data_Summary.csv'),comment = '#', na = c('N/A', -9999)) %>%
slice(-(1:11))%>%
mutate_at(vars(-Field_Name,-Sample_Name,-Field_Name,-IGSN,-Material), as.numeric)
View(sample_data)
View(sample_data)
sample_data = read_csv(paste0(github,'EC_Data_Package/Sample_Data/EC_Sediment_Sample_Data_Summary.csv'),comment = '#', na = c('N/A', -9999)) %>%
slice(-(1:11))%>%
dplyr::select(-Field_Name) %>%
mutate_at(vars(-Sample_Name,-Field_Name,-IGSN,-Material), as.numeric)
View(sample_data)
sample_data = read_csv(paste0(github,'EC_Data_Package/Sample_Data/EC_Sediment_Sample_Data_Summary.csv'),comment = '#', na = c('N/A', -9999)) %>%
slice(-(1:11))%>%
mutate_at(vars(-Sample_Name,-Field_Name,-IGSN,-Material), as.numeric) %>%
dplyr::select(-Field_Name)
View(sample_data)
effect_size = read_csv(paste0(github,'EC_Data_Package/Sample_Data/EC_Sediment_Effect_Size.csv'),comment = '#', na = c('N/A', -9999)) %>%
slice(-(1:11))%>%
dplyr::select('Sample_Name',"Effect_Size_Respiration_Rate_mg_DO_per_L_per_H","Effect_Size_Respiration_Rate_mg_DO_per_kg_per_H","Effect_Size_Initial_Gravimetric_Moisture_g_per_g","Effect_Size_Final_Gravimetric_Moisture_g_per_g","Effect_Size_Extractable_NPOC_mg_per_kg","Effect_Size_Extractable_TN_mg_per_L")%>%
mutate_at(vars(-Sample_Name), as.numeric)
effect_size$site = effect_size$Sample_Name
effect_size$site = gsub('_all','',effect_size$site)
factors = data.frame(Sample_Name = sample_data$Sample_Name, site = sample_data$Sample_Name, Treatment = sample_data$Sample_Name)
factors$site = str_extract(factors$site, "EC_0[0-9]{2}|EC_([A-Za-z0-9]+)")
factors$Treatment = str_extract(factors$Treatment, "W|D|Blk")
factors$Treatment = gsub('W','Wet', factors$Treatment)
factors$Treatment = gsub('D','Dry', factors$Treatment)
sample_data = merge(factors,sample_data, by = 'Sample_Name')
# ======= Calculate Relative abundance of VK classes =======
mol2 = mol %>% dplyr::select(bs1_class)
merged_data = merge(data, mol2, by = 0)
# Calculate the relative abundance of Van Krevelen classes per sample
relative_abundance <- merged_data %>%
gather(key = "sample", value = "intensity", -Row.names, -bs1_class) %>%
group_by(sample, bs1_class) %>%
summarise(total_intensity = sum(intensity, na.rm = TRUE)) %>%
ungroup() %>%
group_by(sample) %>%
mutate(relative_abundance = total_intensity / sum(total_intensity) * 100) %>%
ungroup()
relative_abundance$Sample_Name = str_extract(relative_abundance$sample,    "EC_\\d{3}_[^_]*-(W|D)")
relative_abundance$Sample_Name = gsub('_SIR','',relative_abundance$Sample_Name)
relative_abundance = merge(relative_abundance,factors, by = 'Sample_Name', all = T)
# Create the ggplot
plots <- relative_abundance %>%
ggplot(aes(x = as.factor(site), y = relative_abundance, color = Treatment)) +
geom_boxplot(size = 3, alpha = 0.7) +
facet_wrap(~ bs1_class, scales = "free_y") +
labs(
x = "Location",
y = "Percent Relative Abundance",
color = "Treatment"
) +
theme_bw() +
theme(legend.position = "top")
# Print the plot
print(plots)
# Create the ggplot
plots <- relative_abundance %>%
ggplot(aes(x = as.factor(site), y = relative_abundance, color = Treatment)) +
geom_boxplot(size = 3, alpha = 0.7) +
facet_wrap(~ bs1_class, scales = "free_y") +
labs(
x = " ",
y = "Percent Relative Abundance",
color = "Treatment"
) +
theme_bw() + theme(
legend.position = "top",
axis.text.x = element_text(angle = 45, hjust = 1)
)
plos[[1]]
plots[[1]]
print(plots[[1]])
# Print the plot
print(plots)
relative_abundance %>%
filter(bs1_class == "Amino Sugar") %>%
ggplot(aes(x = as.factor(site), y = relative_abundance, color = Treatment)) +
geom_boxplot(size = 3, alpha = 0.7) +
facet_wrap(~ bs1_class, scales = "free_y") +
labs(
x = " ",
y = "Percent Relative Abundance",
color = "Treatment"
) +
theme_bw() + theme(
legend.position = "top",
axis.text.x = element_text(angle = 45, hjust = 1)
)
relative_abundance %>%
filter(bs1_class == "Amino Sugar") %>%
ggplot(aes(x = as.factor(site), y = relative_abundance, color = Treatment)) +
geom_boxplot() +
facet_wrap(~ bs1_class, scales = "free_y") +
labs(
x = " ",
y = "Percent Relative Abundance",
color = "Treatment"
) +
theme_bw() + theme(
legend.position = "top",
axis.text.x = element_text(angle = 45, hjust = 1)
)
relative_abundance %>%
filter(bs1_class == "Amino Sugar") %>%
ggplot(aes(x = as.factor(site), y = relative_abundance, fill = Treatment)) +
geom_boxplot() +
facet_wrap(~ bs1_class, scales = "free_y") +
labs(
x = " ",
y = "Percent Relative Abundance",
color = "Treatment"
) +
theme_bw() + theme(
legend.position = "top",
axis.text.x = element_text(angle = 45, hjust = 1)
)
# ==== Loading libraries =========
rm(list=ls(all=T))
library(stringr); library(devtools);  library("plyr")
library("readr"); library(tidyverse); library(readxl);library(crayon); library(vegan)
# Load in necessary libraries first
library(reshape2)
library(ggpubr) # For to combine plots
library(dplyr) # For reorganization
library(stringr) # For string manipulation
# ==== Defining paths and working directories ======
setwd('C:/Users/gara009/OneDrive - PNNL/Documents - Core Richland and Sequim Lab-Field Team/Data Generation and Files/ECA/FTICR/03_ProcessedData/EC_Data_Processed_FTICR/')
github = 'C:/Users/gara009/OneDrive - PNNL/Documents/GitHub/ECA_DOM_Thermodynamics/'
# ====== Read in data ======
# Processed ICR Data
data = read.csv(list.files(pattern = "*four_reps_Intensity_Data.csv"), row.names = 1)
mol = read.csv(list.files(pattern = "*clean_Intensity_Mol.csv"), row.names = 1)
getwd()
list.files(pattern = "*four_reps_Intensity_Data.csv")
# ==== Loading libraries =========
rm(list=ls(all=T))
library(stringr); library(devtools);  library("plyr")
library("readr");  library(readxl);library(crayon); library(vegan)
# Load in necessary libraries first
library(reshape2)
library(ggpubr) # For to combine plots
library(dplyr) # For reorganization
library(stringr) # For string manipulation
# ==== Defining paths and working directories ======
github = 'C:/Users/gara009/OneDrive - PNNL/Documents/GitHub/ECA_DOM_Thermodynamics/'
# ====== Read in data ======
# Processed ICR Data
data = read.csv(list.files(path = github, pattern = "*unique_formulas_Data.csv", full.names = T),row.names = 1)
mol = read.csv(list.files(path = github, pattern = "*cal_pts_Mol.csv"), row.names = 1)
# Fixing colnames
colnames(data) = gsub('SIR.','SIR-',colnames(data))
sample_data = read_csv(paste0(github,'EC_Data_Package/Sample_Data/EC_Sediment_Sample_Data_Summary.csv'),comment = '#', na = c('N/A', -9999)) %>%
slice(-(1:11))%>%
mutate_at(vars(-Sample_Name,-Field_Name,-IGSN,-Material), as.numeric)
effect_size = read_csv(paste0(github,'EC_Data_Package/Sample_Data/EC_Sediment_Effect_Size.csv'),comment = '#', na = c('N/A', -9999)) %>%
slice(-(1:11))%>%
dplyr::select('Sample_Name',"Effect_Size_Respiration_Rate_mg_DO_per_L_per_H","Effect_Size_Respiration_Rate_mg_DO_per_kg_per_H","Effect_Size_Initial_Gravimetric_Moisture_g_per_g","Effect_Size_Final_Gravimetric_Moisture_g_per_g","Effect_Size_Extractable_NPOC_mg_per_kg","Effect_Size_Extractable_TN_mg_per_L")%>%
mutate_at(vars(-Sample_Name), as.numeric)
effect_size$site = effect_size$Sample_Name
effect_size$site = gsub('_all','',effect_size$site)
factors = data.frame(Sample_Name = sample_data$Sample_Name, site = sample_data$Sample_Name, Treatment = sample_data$Sample_Name)
factors$site = str_extract(factors$site, "EC_0[0-9]{2}|EC_([A-Za-z0-9]+)")
factors$Treatment = str_extract(factors$Treatment, "W|D|Blk")
factors$Treatment = gsub('W','Wet', factors$Treatment)
factors$Treatment = gsub('D','Dry', factors$Treatment)
sample_data = merge(factors,sample_data, by = 'Sample_Name')
# ========= Plots ======
# Select the mol variables of interest
mol2 = mol %>% dplyr::select(AI_Mod,DBE_1,NOSC,delGcoxPerCmol,lamO2)
# Calculating weighed avg metris and thermodynamics per sample
df.merge = merge(data,mol2, by = 'row.names')
df.stats = as.data.frame(matrix(NA, nrow = ncol(data), ncol = 6))
colnames(df.stats) = c('Sample_Name','AI_mod','NOSC','DBE','Gibbs','Lambda')
for (i in 2:(ncol(data)+1)){
df.stats$Sample_Name[i-1] = colnames(df.merge[i])
df.stats$Gibbs[i-1] = weighted.mean(df.merge$delGcoxPerCmol[which(df.merge[, i] > 0)],df.merge[,i][which(df.merge[, i] > 0)])
df.stats$Lambda[i-1] = weighted.mean(df.merge$lamO2[which(df.merge[, i] > 0)],df.merge[,i][which(df.merge[, i] > 0)])
df.stats$AI_mod[i-1] = weighted.mean(df.merge$AI_Mod[which(df.merge[, i] > 0)],df.merge[,i][which(df.merge[, i] > 0)])
df.stats$NOSC[i-1] = weighted.mean(df.merge$NOSC[which(df.merge[, i] > 0)],df.merge[,i][which(df.merge[, i] > 0)])
df.stats$DBE[i-1] = weighted.mean(df.merge$DBE_1[which(df.merge[, i] > 0)],df.merge[,i][which(df.merge[, i] > 0)])
}
# Adding factors manually to df.stats to not complicate merging
df.stats$site = str_extract(df.stats$Sample_Name, "EC_0[0-9]{2}|EC_([A-Za-z0-9]+)")
df.stats$Treatment = str_extract(df.stats$Sample_Name, "W|D|Blk")
df.stats$Treatment = gsub('W','Wet', df.stats$Treatment)
df.stats$Treatment = gsub('D','Dry', df.stats$Treatment)
ggplot(df.stats, aes(x = site, y = Gibbs, fill = Treatment)) +
geom_boxplot() +
labs(x = "Location", y = "Intensity weighted avg Gibbs per C mol Unique peaks") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(df.stats)
# Define a function to perform Wilcoxon test
wilcox_test <- function(df, variable, group_var) {
results <- data.frame()
unique_sites <- unique(df[[group_var]])
for (site in unique_sites) {
site_data <- df[df[[group_var]] == site, ]
wet_data <- site_data[site_data$Treatment == 'Wet', variable]
dry_data <- site_data[site_data$Treatment == 'Dry', variable]
if (length(wet_data) > 0 & length(dry_data) > 0) {
test_result <- wilcox.test(wet_data, dry_data)
results <- rbind(results, data.frame(Site = site, Variable = variable, W = test_result$estimate, p.value = test_result$p.value))
}
}
return(results)
}
variables_to_test <- c('AI_mod', 'NOSC', 'DBE', 'Gibbs', 'Lambda')
wilcox_results <- data.frame()
for (variable in variables_to_test) {
wilcox_results <- rbind(wilcox_results, wilcox_test(df.stats, variable, 'site'))
}
results <- data.frame()
unique_sites <- unique(df$site)
df = df.stats
unique_sites <- unique(df$site)
site = unique_sites[1]
site_data <- df[df[[group_var]] == site, ]
site_data <- filter(df,df$site == site)
View(site_data)
df$site == site
site_data <- df[df$site == site,]
View(site_data)
wet_data <- site_data[site_data$Treatment == 'Wet', variable]
dry_data <- site_data[site_data$Treatment == 'Dry', variable]
if (length(wet_data) > 0 & length(dry_data) > 0) {
test_result <- wilcox.test(wet_data, dry_data)
results <- rbind(results, data.frame(Site = site, Variable = variable, W = test_result$estimate, p.value = test_result$p.value))
}
# Define a function to perform the Wilcoxon test with error handling
wilcox_test <- function(df, variable, group_var) {
results <- data.frame()
unique_sites <- unique(df[[group_var]])
for (site in unique_sites) {
site_data <- df[df[[group_var]] == site, ]
wet_data <- site_data[site_data$Treatment == 'Wet', variable]
dry_data <- site_data[site_data$Treatment == 'Dry', variable]
if (length(wet_data) > 0 & length(dry_data) > 0) {
if (length(wet_data) > 1 & length(dry_data) > 1) {
test_result <- wilcox.test(wet_data, dry_data, exact = FALSE)
results <- rbind(results, data.frame(Site = site, Variable = variable,
W = test_result$statistic,
p.value = test_result$p.value))
} else {
results <- rbind(results, data.frame(Site = site, Variable = variable,
W = NA,
p.value = NA))
}
} else {
results <- rbind(results, data.frame(Site = site, Variable = variable,
W = NA,
p.value = NA))
}
}
return(results)
}
variables_to_test <- c('AI_mod', 'NOSC', 'DBE', 'Gibbs', 'Lambda')
wilcox_results <- data.frame()
# Perform Wilcoxon tests for each variable and combine the results
for (variable in variables_to_test) {
wilcox_results <- rbind(wilcox_results, wilcox_test(df.stats, variable, 'site'))
}
print(wilcox_results)
wilcox_test <- function(df, variable, group_var) {
results <- data.frame()
unique_sites <- unique(df[[group_var]])
for (site in unique_sites) {
site_data <- df[df[[group_var]] == site, ]
wet_data <- site_data[site_data$Treatment == 'Wet', variable]
dry_data <- site_data[site_data$Treatment == 'Dry', variable]
if (length(wet_data) > 0 & length(dry_data) > 0) {
if (length(wet_data) > 1 & length(dry_data) > 1) {
test_result <- wilcox.test(wet_data, dry_data, exact = FALSE)
results <- rbind(results, data.frame(Site = site, Variable = variable,
W = test_result$statistic,
p.value = test_result$p.value))
} else {
results <- rbind(results, data.frame(Site = site, Variable = variable,
W = NA,
p.value = NA))
}
} else {
results <- rbind(results, data.frame(Site = site, Variable = variable,
W = NA,
p.value = NA))
}
}
return(results)
}
variables_to_test <- c('AI_mod', 'NOSC', 'DBE', 'Gibbs', 'Lambda')
wilcox_results <- data.frame()
# Perform Wilcoxon tests for each variable and combine the results
for (variable in variables_to_test) {
wilcox_results <- rbind(wilcox_results, wilcox_test(df.stats, variable, 'site'))
}
View(wilcox_results)
#Filter for significant p-values (e.g., p < 0.05)
significant_results <- wilcox_results %>% filter(p.value < 0.05)
View(significant_results)
# Count how many sites have significant differences across multiple mol values
significant_count <- significant_results %>%
group_by(Site) %>%
summarise(Num_Significant_Variables = n())
View(significant_count)
View(effect_size)
df_filtered <- df.stats %>% filter(site %in% significant_count$Site)
View(df_filtered)
ggplot(df_filtered, aes(x = site, y = Gibbs, fill = Treatment)) +
geom_boxplot() +
labs(x = "Location", y = "Intensity weighted avg Gibbs per C mol Unique peaks") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(df_filtered, aes(x = site, y = Lambda, fill = Treatment)) +
geom_boxplot() +
labs(x = "Location", y = "Intensity weighted avg Lambda Unique peaks") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# ===== Calculate a median of these metrics per site and treatment ====
df.medians = df.stats %>%
group_by(site,Treatment) %>%
summarise(
AI_mod_median = median(AI_mod, na.rm = TRUE),
NOSC_median = median(NOSC, na.rm = TRUE),
DBE_median = median(DBE, na.rm = TRUE),
Gibbs_median = median(Gibbs, na.rm = TRUE),
Lambda_median = median(Lambda, na.rm = TRUE)
)
df.medians = df.medians %>%
mutate(Sample_Name = paste0(site, if_else(Treatment == "Wet", "-W", "-D"))) %>%
dplyr::select(-Treatment)
df.all = merge(sample_data,df.medians, by = 'Sample_Name')%>%
mutate(
Median_Respiration_Rate_mg_DO_per_kg_per_H = ifelse(        Median_Respiration_Rate_mg_DO_per_kg_per_H == 0,
-min(abs(Median_Respiration_Rate_mg_DO_per_kg_per_H[
Median_Respiration_Rate_mg_DO_per_kg_per_H != 0 &
!is.na(Median_Respiration_Rate_mg_DO_per_kg_per_H)
])) / 2,
Median_Respiration_Rate_mg_DO_per_kg_per_H
),
Cubic_Root_Respiration = abs(Median_Respiration_Rate_mg_DO_per_kg_per_H)^(1/3)
)%>%
filter(!is.na(Cubic_Root_Respiration))
ggplot(df.all, aes(x = Median_Extractable_NPOC_mg_per_kg, y = Gibbs_median, color = Treatment)) +
geom_point(size = 3, alpha = 0.7) +
labs(x = "Extractable_NPOC_mg_per_kg", y = "Gibbs Median") +
theme_bw() +
theme(legend.position = 'top')
View(df.medians)
colnames(df.medians)
df.medians$Treatment <- ifelse(str_detect(df.medians$Sample_Name, "-W"), 'Wet', 'Dry')
# Spreading data to wide format for easy ratio calculation
df_wide <- df.medians %>%
pivot_wider(names_from = Treatment, values_from = c(AI_mod_median, NOSC_median, DBE_median, Gibbs_median, Lambda_median))
View(df_wide)
# Calculating Ratios
df_ratios <- df_wide %>%
mutate(
AI_mod_ratio = AI_mod_median_Wet / AI_mod_median_Dry,
NOSC_ratio = NOSC_median_Wet / NOSC_median_Dry,
DBE_ratio = DBE_median_Wet / DBE_median_Dry,
Gibbs_ratio = Gibbs_median_Wet / Gibbs_median_Dry,
Lambda_ratio = Lambda_median_Wet / Lambda_median_Dry
)
View(df_ratios)
df_ratios <- df_ratios %>%
select(site, starts_with("ratio"))
View(df_ratios)
# Calculating Ratios
df_ratios <- df_wide %>%
group_by(site) %>%
mutate(
AI_mod_ratio = as.numeric(AI_mod_median_Wet) / AI_mod_median_Dry,
NOSC_ratio = NOSC_median_Wet / NOSC_median_Dry,
DBE_ratio = DBE_median_Wet / DBE_median_Dry,
Gibbs_ratio = Gibbs_median_Wet / Gibbs_median_Dry,
Lambda_ratio = Lambda_median_Wet / Lambda_median_Dry
)
View(df_ratios)
df_ratios = df_medians %>%
group_by(site)%>%
mutate(AI_mod_ratio = df.medians$AI_mod_median[grep('W',df.medians$Sample_Name)]/df.medians$AI_mod_median[grep('D',df.medians$Sample_Name)])
df_ratios = df.medians %>%
group_by(site)%>%
mutate(AI_mod_ratio = df.medians$AI_mod_median[grep('W',df.medians$Sample_Name)]/df.medians$AI_mod_median[grep('D',df.medians$Sample_Name)])
# Adding Treatment column based on Sample_Name
df.medians <- df.medians %>%
mutate(Treatment = ifelse(str_detect(Sample_Name, "-W"), 'Wet', 'Dry'))
# Function to calculate the ratio within each group
calculate_ratio <- function(df, column) {
wet_value <- df %>% filter(Treatment == 'Wet') %>% pull(column)
dry_value <- df %>% filter(Treatment == 'Dry') %>% pull(column)
ratio <- if(length(wet_value) == 1 & length(dry_value) == 1) {
wet_value / dry_value
} else {
NA
}
return(ratio)
}
# Calculating the ratios for each site and each median value
df_ratios <- df.medians %>%
group_by(site) %>%
summarise(
AI_mod_ratio = calculate_ratio(cur_data(), "AI_mod_median"),
NOSC_ratio = calculate_ratio(cur_data(), "NOSC_median"),
DBE_ratio = calculate_ratio(cur_data(), "DBE_median"),
Gibbs_ratio = calculate_ratio(cur_data(), "Gibbs_median"),
Lambda_ratio = calculate_ratio(cur_data(), "Lambda_median")
)
View(df_ratios)
# Adding Treatment column based on Sample_Name
df.medians <- df.medians %>%
mutate(Treatment = ifelse(str_detect(Sample_Name, "-W"), 'Wet', 'Dry'))
# Function to calculate the ratio within each group
calculate_ratio <- function(df, column) {
wet_value <- df %>% filter(Treatment == 'Wet') %>% pull(column)
dry_value <- df %>% filter(Treatment == 'Dry') %>% pull(column)
ratio <- if(length(wet_value) == 1 & length(dry_value) == 1) {
wet_value / dry_value
} else {
NA
}
return(ratio)
}
# Calculating the ratios for each site and each median value
df_ratios <- df.medians %>%
group_by(site) %>%
summarise(
AI_mod_ratio = calculate_ratio(cur_data(), "AI_mod_median"),
NOSC_ratio = calculate_ratio(cur_data(), "NOSC_median"),
DBE_ratio = calculate_ratio(cur_data(), "DBE_median"),
Gibbs_ratio = calculate_ratio(cur_data(), "Gibbs_median"),
Lambda_ratio = calculate_ratio(cur_data(), "Lambda_median")
)
df.medians <- df.medians %>%
mutate(Treatment = ifelse(str_detect(Sample_Name, "-W"), 'Wet', 'Dry'))
# Split the data into Wet and Dry
df_wet <- df.medians %>% filter(Treatment == 'Wet')
df_dry <- df.medians %>% filter(Treatment == 'Dry')
# Rename columns to indicate treatment type
df_wet <- df_wet %>%
rename_with(~ paste0(., "_Wet"), -c(site, Sample_Name, Treatment))
df_dry <- df_dry %>%
rename_with(~ paste0(., "_Dry"), -c(site, Sample_Name, Treatment))
# Join the Wet and Dry dataframes by site
df_joined <- left_join(df_wet, df_dry, by = "site")
# Calculate the ratios
df_ratios <- df_joined %>%
mutate(
AI_mod_ratio = AI_mod_median_Wet / AI_mod_median_Dry,
NOSC_ratio = NOSC_median_Wet / NOSC_median_Dry,
DBE_ratio = DBE_median_Wet / DBE_median_Dry,
Gibbs_ratio = Gibbs_median_Wet / Gibbs_median_Dry,
Lambda_ratio = Lambda_median_Wet / Lambda_median_Dry
) %>%
select(site, AI_mod_ratio, NOSC_ratio, DBE_ratio, Gibbs_ratio, Lambda_ratio)
# Display the resultant dataframe with ratios
print("Ratios of median values between Wet and Dry samples:")
print(df_ratios)
